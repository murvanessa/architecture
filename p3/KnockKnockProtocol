/*
 * Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

import java.net.*;

import javax.swing.plaf.synth.SynthSeparatorUI;

import java.io.*;

public class KnockKnockProtocol
{
	String V=new String();
	protected Matrix matrix;	
	protected Socket socket;
	int mult[][];
	int resultat =0;
	int[][] temp;

    public String processInput(String theInput) 
    {
    	System.out.println(theInput);
    	
    	int[][] result = parseExecution(theInput);
		for(int i=0; i < result.length; i++) 
		{
			for(int j=0; j < result.length; j++)
			{
				V+= String.valueOf(result[i][j]);
				V+=" ";
			}
			V+="/";
		}
		System.out.println("++++++++++"+V);
		return V;
      
    }
    private int[][] parseExecution(String line) throws IllegalArgumentException
	{
		// TODO Auto-generated method stub
		int[][] Result ;
		String [] elements = line.split("/");
		Result = new int[elements.length-1][elements.length-1];
		int puissance=Integer.parseInt(elements[elements.length-1]);
		System.out.println(puissance);
		for(int i = 0; i < elements.length-1; i++) {
			String[] ligne = elements[i].split(" ");
			for(int j =0; j< elements.length-1; j++) {
				Result[i][j] = Integer.parseInt(ligne[j]);
				System.out.print(ligne[j]+ " ");
			}
			System.out.println(" ");
		}
		temp = new int[elements.length-1][elements.length-1];
		mult = new int[elements.length-1][elements.length-1];
		
		for(int i = 0; i < elements.length-1; i++) 
		{
			for(int j =0; j<elements.length-1; j++) 
			{
				temp[i][j]=Result[i][j];
		
			}
			
		}
		for(int n= 1; n< puissance; n++) 
		{
			System.out.println("puissancee est :"+puissance);
			for(int i = 0; i < elements.length-1; i++) 
			{
				for(int j =0; j<elements.length-1; j++) 
				{
					for(int k = 0; k< elements.length-1; k++)
					{
						resultat+=Result[i][k]*temp[k][j];
					}
					mult[i][j]=resultat;
					resultat=0;
				}
			}
			for(int i = 0; i < elements.length-1; i++) 
			{
				for(int j =0; j<elements.length-1; j++) 
				{	
					temp[i][j] = mult[i][j];
				}
			}
			
		}
		
		System.out.println("apres multi");
		for(int i = 0; i < elements.length-1; i++) 
		{
			for(int j =0; j<elements.length-1; j++) 
			{
				
				System.out.print(mult[i][j]+" ");
		
			}
			System.out.println(" ");
		}
		
		
		return mult;
	}
  
}
